version: '3.4'

networks:
  network:

volumes:
  elastic-data:  #for ES data persistency
  elastic-config:
  suricata-rules: #for suricata rules transfer between scirius and suricata and for persistency
  scirius-data: #for scirius data persistency
  scirius-static: #statics files to be served by nginx
  suricata-run: #path where the suricata socket resides
  suricata-logs:
  suricata-logrotate:
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/containers-data/suricata/logrotate
  logstash-sincedb: #where logstash stores it's state so it doesn't re-ingest
  arkime-logs:
  arkime-pcap:
  arkime-config:


services:

  elasticsearch:
    container_name: elasticsearch
    image: opensearchproject/opensearch:2.6.0
    restart: ${RESTART_MODE:-unless-stopped}
    environment:
      - cluster.name=elasticsearch
      - node.name=elasticsearch
      - discovery.type=single-node
      #- discovery.seed_hosts=elasticsearch
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms2g -Xmx2g" # Set min and max JVM heap sizes to at least 50% of system RAM
      - "DISABLE_INSTALL_DEMO_CONFIG=true" # Prevents execution of bundled demo script which installs demo certificates and security configurations to OpenSearch
      - "DISABLE_SECURITY_PLUGIN=true" # Disables Security plugin
    volumes:
      - elastic-config:/usr/share/
      - elastic-data:/var/lib/
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    networks:
      network:

  kibana:
    container_name: kibana
    image:  opensearchproject/opensearch-dashboards:2.6.0
    restart: ${RESTART_MODE:-unless-stopped}
    ports:
      - 5601:5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      - 'OPENSEARCH_HOSTS=["http://elasticsearch:9200"]'
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
    networks:
      network:

  logstash:
    container_name: logstash
    image:   opensearchproject/logstash-oss-with-opensearch-output-plugin
    restart: ${RESTART_MODE:-unless-stopped}
    mem_limit: ${LOGSTASH_MEMORY:-2G}
    volumes:
      - logstash-sincedb:/since.db
      - ${PWD}/containers-data/suricata/logs:/var/log/suricata:ro
      - ${PWD}/containers-data/logstash/conf.d/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ${PWD}/containers-data/logstash/templates/elasticsearch7-template.json:/usr/share/logstash/config/elasticsearch7-template.json
    networks:
      network:

  suricata:
    container_name: suricata
    image: jasonish/suricata:master-amd64
    entrypoint: /etc/suricata/new_entrypoint.sh
    restart: ${RESTART_MODE:-unless-stopped}

    environment:
      - SURICATA_OPTIONS=${INTERFACES} -vvv --set sensor-name=suricata
    cap_add:
      - NET_ADMIN
      - SYS_NICE
    network_mode: host
    volumes:
       - ${PWD}/containers-data/suricata/logs:/var/log/suricata
       - suricata-rules:/etc/suricata/rules
       - suricata-run:/var/run/suricata/
       - ${PWD}/containers-data/suricata/etc:/etc/suricata
       - suricata-logrotate:/etc/logrotate.d/

  scirius:
    container_name: scirius
    image: ghcr.io/stamusnetworks/scirius:${SCIRIUS_VERSION:-selks}
    restart: ${RESTART_MODE:-unless-stopped}
    environment:
      - SECRET_KEY=${SCIRIUS_SECRET_KEY}
      - DEBUG=${SCIRIUS_DEBUG:-False}
      - SCIRIUS_IN_SELKS=True
      - USE_ELASTICSEARCH=True
      - ELASTICSEARCH_ADDRESS=elasticsearch:9200 #Default
      - USE_KIBANA=True
      - KIBANA_URL=http://kibana:5601 #Default
      - KIBANA_PROXY=True #Get kibana proxied by Scirius
      - ALLOWED_HOSTS=* #allow connexions from anywhere
      - KIBANA7_DASHBOARDS_PATH=/opt/selks/kibana7-dashboards #where to find kibana dashboards
      - SURICATA_UNIX_SOCKET=/var/run/suricata/suricata-command.socket #socket to control suricata
      - USE_EVEBOX=True #gives access to evebox in the top menu
      - EVEBOX_ADDRESS=evebox:5636 #Default
      - USE_SURICATA_STATS=True #display more informations on the suricata page
      - USE_MOLOCH=True
      - MOLOCH_URL=http://arkime:8005

    volumes:
      - scirius-static:/static/
      - scirius-data:/data/
      - ${PWD}/containers-data/scirius/logs/:/logs/
      - suricata-rules:/rules
      - suricata-run:/var/run/suricata
      - ${PWD}/containers-data/suricata/logs:/var/log/suricata:ro

    networks:
      network:

  evebox:
    container_name: evebox
    image: jasonish/evebox:master
    command: ["-e", "http://elasticsearch:9200"]
    restart: ${RESTART_MODE:-unless-stopped}
    environment:
      - EVEBOX_HTTP_TLS_ENABLED=false
      - EVEBOX_AUTHENTICATION_REQUIRED=false
    networks:
      network:

  nginx:
    container_name: nginx
    image: nginx
    command: ['${NGINX_EXEC:-nginx}', '-g', 'daemon off;']
    restart: ${RESTART_MODE:-unless-stopped}
    volumes:
      - scirius-static:/static/:ro
      - ${PWD}/containers-data/nginx/conf.d/:/etc/nginx/conf.d/:ro
      - ${PWD}/containers-data/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ${PWD}/containers-data/nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - 8443:443
    networks:
      network:

  cron:
    # This containers handles crontabs for the other containers, following the 1 task per container principle.
    # It is based on  `docker:latest` image, wich is an alpine image with docker binary
    container_name: cron
    image: docker:latest
    command: [sh, -c, "echo '*  *        *      *        *      run-parts /etc/periodic/1min' >> /etc/crontabs/root && crond -f -l 8"]
    restart: ${RESTART_MODE:-unless-stopped}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # This bind-mout allows using the hosts docker deamon instead of created one inside the container

      # Those volumes will contain the cron jobs
      - ${PWD}/containers-data/cron-jobs/1min:/etc/periodic/1min/:ro
      - ${PWD}/containers-data/cron-jobs/15min:/etc/periodic/15min/:ro
      - ${PWD}/containers-data/cron-jobs/daily:/etc/periodic/daily/:ro
      - ${PWD}/containers-data/cron-jobs/hourly:/etc/periodic/hourly/:ro
      - ${PWD}/containers-data/cron-jobs/monthly:/etc/periodic/monthly/:ro
      - ${PWD}/containers-data/cron-jobs/weekly:/etc/periodic/weekly/:ro
